type Employee {
  id: ID!
  first_name: String!
  last_name: String
  name: String!
  address: String
  description: String
  isVip: Boolean
  isNew: Boolean
  favorited: Favorite @morphOne @with(relation: "favoriteRelation")
  gender: Int
  age: Int
  type: Int
  race_type_id: Int
  created_at: DateTime!
  updated_at: DateTime!
  race_type: [EmployeeRaceType] @belongsTo
  events: [Event] @belongsToMany
  prices: [Price] @belongsToMany
  services: [Service] @belongsToMany
  photos: [Media] @hasMany
  reviews: [Review] @hasMany
}

input EmployeeCreateInput {
  name: String
  birthday: String
#  service_for: String // Todo: Add serice for
#  languages: String // Todo: Add languages
  gender: String
  race_type_id: String
  nationality: String
  description: String
  index: String
  city: String
  address: String
  phone: String
  email: String
  website: String
  prices: JSON
  parameters: JSON
}

input EmployeeUpdateInput {
  first_name: String
  last_name: String
  gender: Int
  age: Int
  type: Int
  race_type_id: Int
  description: String
  address: String
  text: String
  lat: String
  lng: String
}

input EmployeeFilters {
#  location: String @whereHas(key: "location_id", method: "whereIn")
  location: String @where
  gender: String @where
  services: [Int] @whereHas(key: "service_id", method: "whereIn")
  age: AgeRange @whereBetween
  race_type: String @whereHas(key: "race_type_id", method: "whereIn")
  __typename: String
}

extend type Query {
  employees(filters: EmployeeFilters @spread): [Employee!]! @paginate
  employee(id: ID @eq): Employee @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
  createEmployee(input: EmployeeCreateInput @spread): Employee
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@create")

  updateEmployee(employee: ID!, input: EmployeeUpdateInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@update")

  createEmployeeEvent(employee: ID!, input: EventInput @spread): Event
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@createEvent")

  uploadEmployeeFile(employee: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@uploadFile")

  deleteEmployeeFile(employee: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@deleteFile")

  syncEmployeeServices(employee: ID!, services: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@syncServices")

  syncEmployeePrices(employee: ID!, prices: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@syncPrices")
}
