union Owner = User | Club

type Employee {
  id: ID!
  first_name: String!
  last_name: String
  name: String!
  index: String
  city_id: Int
  address: String
  description: String
  isVip: Boolean
  isNew: Boolean
  favorited: Favorite @morphOne @with(relation: "favoriteRelation")
  gender: Int
  birthday: Date
  age: Int
  type: Int
  race_type_id: Int
  lat: Float,
  lng: Float,
  email: String,
  phone: String,
  website: String,
  created_at: DateTime!
  updated_at: DateTime!
  #
  events_count: Int! @count(relation: "events")
  photos_count: Int! @count(relation: "photos")
  videos_count: Int! @count(relation: "videos")
  #
  owner: Owner @belongsTo
  race_type: [EmployeeRaceType] @belongsTo
  parameters: [Parameter] @belongsToMany
  schedule: [EmployeeSchedule] @hasMany
  events: [Event] @belongsToMany
  prices: [Price] @belongsToMany
  services: [Service] @belongsToMany
  photos: [Media] @hasMany
  videos: [Media] @hasMany
  reviews: [Review] @hasMany
  #
  unread_messages_count: Int! @method(name: "unreadMessagesCount")
  will_activate_at: String
  active: Int!
  soon: Int!
}

#  service_for: String // Todo: Add serice for
#  languages: String // Todo: Add languages
input EmployeeInput {
  name: String
  birthday: String
  gender: String
  race_type_id: String
  type: String
  description: String
  index: String
  city_id: Int
  address: String
  phone: String
  email: String
  website: String
  schedule: JSON
  prices: JSON
  services: JSON
  parameters: JSON
  photos: [Upload]
  videos: [Upload]
  club_id: Int
}

input EmployeeFilters {
#  location: String @whereHas(key: "location_id", method: "whereIn")
#  location: String @where
  type: Int @where
  orderBy: [OrderByClause!] @orderBy
  gender: String @where
  services: [Int] @whereHas(key: "service_id", method: "whereIn")
  age: AgeRange @whereBetween
#  race_type: String @whereHas(key: "race_type_id", method: "whereIn")
  race_type_id: String @where
  show_level: [Int] @in
  close_to: Distance @scope(name: "closeTo")
  city_id: Int @where
  cities: [Int] @in(key: "city_id")
  cantons: [Int] @scope(name: "hasCantons")
  __typename: String
}

extend type Query {
  employees(filters: EmployeeFilters @spread): [Employee!]! @paginate
  employee(id: ID @eq): Employee @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
  createEmployee(input: EmployeeInput @spread): Employee
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@create")

  updateEmployee(employee: ID!, input: EmployeeInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@update")

  deleteEmployee(employee: ID!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@delete")

  createEmployeeEvent(employee: ID!, input: EventInput @spread): Event
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@createEvent")

  uploadEmployeeFiles(employee: ID!, collection: String!, files: [Upload!]): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@uploadFiles")

  deleteEmployeeFile(employee: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@deleteFile")

  syncEmployeeServices(employee: ID!, services: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@syncServices")

  syncEmployeePrices(employee: ID!, prices: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EmployeeController@syncPrices")
}
