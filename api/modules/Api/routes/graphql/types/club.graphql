type Club {
  id: ID!
  name: String!
  type: ClubType @belongsTo
  email: String
  website: String
  phones: String
  description: String
  address: String
  index: String
  comment: String
  city_id: Int
  favorited: Favorite @morphOne @with(relation: "favoriteRelation")
  lat: Float
  lng: Float
  start_time: String
  end_time: String
  owner: User @belongsTo
  manager: User @belongsTo
  managers: User @belongsToMany
  admin: User @belongsTo
  city: City @belongsTo
  employees: [Employee] @morphMany
  prices: [Price] @belongsToMany
  services: [Service] @belongsToMany
  events: [Event] @belongsToMany
  photos: [Media] @hasMany
  videos: [Media] @hasMany
  schedule: [ClubSchedule] @hasMany
  logo: Media @hasOne
  events_count: Int! @count(relation: "events")
  photos_count: Int! @count(relation: "photos")
  videos_count: Int! @count(relation: "videos")
}

input ClubInput {
  name: String!
  club_type_id: Int!
  start_time: String
  end_time: String
  email: String
  website: String
  phone: String
  phones: String
  description: String!
  comment: String
  address: String!
  index: String
  city_id: Int
  moderator: ClubModeratorInput
  lat: String
  lng: String
  # File
  logotype: Upload
  prices: JSON
  services: JSON
  schedule: JSON
  photos: [Upload]
  videos: [Upload]
  access_phone_edit: Boolean
}

input ClubModeratorInput {
  first_name: String
  last_name: String
  email: String
  phone: String
}

type ClubType {
  id: ID!
  name: String!
}

input ClubFilters {
  ids: [Int] @in(key: "id")
  services: [Int] @whereHas(key: "service_id", method: "whereIn")
  club_type_id: Int @where
  club_type_ids: [Int] @in(key: "club_type_id")
  start_time: String @where
  orderBy: [OrderByClause!] @orderBy
  close_to: Distance @scope(name: "closeTo")
  cantons: [Int] @scope(name: "hasCantons")
  __typename: String
}

extend type Query {
  club_types: [ClubType!]! @all
  clubs(filters: ClubFilters @spread): [Club!]! @paginate
  club(id: ID @eq): Club @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
  createClub(input: ClubInput @spread): Club
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@create")

  updateClub(club: ID!, input: ClubInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@update")

  uploadClubFiles(club: ID!, collection: String!, files: [Upload]!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@uploadFiles")

  deleteClubFile(club: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@deleteFiles")

  createClubEvent(club: ID!, input: EventInput @spread): Event
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@createEvent")

  updateClubEvent(event: ID!, input: EventUpdateInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@updateEvent")

  syncClubServices(club: ID!, services: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@syncServices")

  syncClubPrices(club: ID!, prices: JSON): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@syncPrices")
}
