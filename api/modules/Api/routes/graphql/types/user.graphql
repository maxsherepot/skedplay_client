type User {
    id: ID!
    name: String!
    phone: String!
    email: String!
    gender: Int
    birthday: String
    age: Int
    is_client: Boolean
    is_club_owner: Boolean
    is_employee: Boolean
    is_manager: Boolean
    favorites_count: Int @field(resolver: "Modules\\Api\\GraphQL\\Queries\\UserQuery@getFavoriteCount")
    clubs: [Club] @hasMany
    avatar: Media @hasOne
    employees: [Employee] @morphMany
    employee: Employee
    # counters
    employees_photos: Int
    employees_videos: Int
    employees_events: Int
    unread_messages_count: Int! @method(name: "unreadMessagesCount")
    status: Int!
    rejected_reason: String
    employees_club_owners: [Employee] @hasMany
}

input UserInput {
    name: String
    phone: String
    email: String
    gender: Int
    birthday: String
    age: Int
    password: String
    password_confirmation: String
}

type UserPayload implements Status {
    status: Boolean!
    message: String
}

extend type Query @middleware(checks: ["auth:api"]) {
    user(id: ID @eq): User @find

    favoriteEmployees(id: ID!): [Employee]
    @field(resolver: "Modules\\Api\\GraphQL\\Queries\\UserQuery@getFavoriteEmployees")

    favoriteClubs(id: ID!): [Club]
    @field(resolver: "Modules\\Api\\GraphQL\\Queries\\UserQuery@getFavoriteClubs")

    favoriteEvents(id: ID!): [Event]
    @field(resolver: "Modules\\Api\\GraphQL\\Queries\\UserQuery@getFavoriteEvents")
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateUser(user: ID!, input: UserInput @spread): UserPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@update")

    uploadUserAvatar(avatar: Upload!, collection: String!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@uploadAvatar")
}
