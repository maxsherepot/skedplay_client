type Event {
    id: ID!
    title: String!
    short_title: String!
    description: String!
    favorited: Favorite @morphOne @with(relation: "favoriteRelation")
    type: EventType! @belongsTo
    club: Club! @belongsTo
    photos: [Media] @hasMany
}

input EventInput {
    title: String!
    description: String!
    event_type_id: Int!
    club_id: Int
    photos: [Upload]
}

input EventUpdateInput {
    title: String
    description: String
    event_type_id: Int
    club_id: Int
    photos: [Upload]
}

input EventFilters {
    event_type_id: Int!
}

extend type Query {
    events(filters: EventFilters): [Event!]! @paginate
    event(id: ID @eq): Event @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateEvent(event: ID!, input: EventUpdateInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@update")

    deleteEvent(event: ID!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@delete")

    uploadEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@deleteFile")
}
