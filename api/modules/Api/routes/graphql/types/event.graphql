union Owner = User | Club

type Event {
    id: ID!
    title: String!
    short_title: String!
    description: String!
    favorited: Favorite @morphOne @with(relation: "favoriteRelation")
    address: String
    isSent: Boolean
    lat: Float,
    lng: Float,
    price: Float,
    type: EventType! @belongsTo
    mode: Int!
    club: Club @belongsTo
    owner: Owner @belongsTo
    mainPhoto: Media @hasOne
    photos: [Media] @hasMany
    employees: [Employee] @belongsToMany @with(relation: "employeesRelation")
    start_date: Date,
    end_date: Date,
    start_time: String
    days: [Int!],
    days_for_checkboxes: String,
}

input EventInput {
    title: String!
    description: String!
    event_type_id: Int!
    club_id: Int
    mode: Int!
    address: String
    price: Float,
    start_date: String,
    end_date: String,
    start_time: String,
    mainPhoto: Upload
    photos: [Upload]
    days: [Int!]
    employees_ids: [Int!]
}

input EventUpdateInput {
    title: String
    description: String
    event_type_id: Int
    club_id: Int
    price: Float,
    mode: Int!
    address: String
    photos: [Upload]
    start_date: String,
    end_date: String,
    start_time: String,
    mainPhoto: Upload
    days: [Int!]
    employees_ids: [Int!]
}

input EventFilters {
    ids: [Int] @in(key: "id")
    event_type_id: Int @where
    event_type_ids: [Int] @in(key: "event_type_id")
    cantons: [Int] @scope(name: "hasCantons")
    close_to: Distance @scope(name: "closeTo")
    date: Date @scope(name: "ofDate")
    __typename: String
}

extend type Query {
    events(filters: EventFilters @spread): [Event!]! @paginate
    eventsByOwner(owner_id: ID!, owner_type: String!): [Event!]! @router(action: "Modules\\Api\\Http\\Controllers\\EventController@getByOwner")
    event(id: ID @eq): Event @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateEvent(event: ID!, input: EventUpdateInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@update")

    deleteEvent(event: ID!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@delete")

    uploadEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@deleteFile")
}
