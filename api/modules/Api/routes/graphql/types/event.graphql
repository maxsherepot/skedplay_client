union Owner = User | Club

type Event {
    id: ID!
    title: String!
    short_title: String!
    description: String!
    favorited: Favorite @morphOne @with(relation: "favoriteRelation")
    type: EventType! @belongsTo
    club: Club @belongsTo
    owner: Owner @belongsTo
    photos: [Media] @hasMany
}

input EventInput {
    title: String!
    description: String!
    event_type_id: Int!
    club_id: Int
    photos: [Upload]
}

input EventUpdateInput {
    title: String
    description: String
    event_type_id: Int
    club_id: Int
    photos: [Upload]
}

input EventFilters {
    event_type_id: Int @where
    event_type_ids: [Int] @in(key: "event_type_id")
    cantons: [Int] @scope(name: "hasCantons")
    close_to: Distance @scope(name: "closeTo")
    __typename: String
}

extend type Query {
    events(filters: EventFilters @spread): [Event!]! @paginate
    eventsByOwner(owner_id: ID!, owner_type: String!): [Event!]! @router(action: "Modules\\Api\\Http\\Controllers\\EventController@getByOwner")
    event(id: ID @eq): Event @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateEvent(event: ID!, input: EventUpdateInput @spread): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@update")

    deleteEvent(event: ID!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@delete")

    uploadEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, collection: String!, file: Upload!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@uploadFile")

    deleteEventFile(event: ID!, file_id: Int!): StatusPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\EventController@deleteFile")
}
