type Message {
    id: Int!
    chat_id: Int!
    created_at: String!
    updated_at: String!
    from_client: Int!
    text: String!
    seen: Int!
    attachments: [Media] @hasMany
}

type Attachment {
    id: Int!
    url: String!
}

type Receiver {
    id: Int!
    name: String!
    avatar: Media
}

type ChatRoom {
    id: Int!
    employee_id: Int!
    employee_avatar: Media
    client_id: Int!
    client_avatar: Media
    receiver: Receiver!
    messages: [Message!]!
}

type Chat {
    id: Int!
    employee_id: Int!
    employee_avatar: Media
    client_id: Int!
    client_avatar: Media
    receiver: Receiver!
    last_message_date: String!
    unread_messages_count: Int!
}

type ChatWithLastMessage {
    id: Int!
    employee: Employee!
    client: User!
    last_message: Message
}

type ProfileChat {
    id: Int
    receiver: Receiver!
    messages: [Message]!
}

input MessageInput {
    chat_id: Int
    client_id: Int!
    employee_id: Int!
    text: String!
    attachments: [Upload!]
}

extend type Query @middleware(checks: ["auth:api"]) {
    chat(chatId: Int!): ChatRoom!
    @router(action: "Modules\\Chat\\Http\\Controllers\\ChatController@show")

    chats(employeeId: Int): [Chat!]!
    @router(action: "Modules\\Chat\\Http\\Controllers\\ChatController@index")

    myChats: [ChatWithLastMessage!]
    @router(action: "Modules\\Chat\\Http\\Controllers\\ChatController@myChatsWithLastMessages")
}

 extend type Mutation @middleware(checks: ["auth:api"]) {
     sendMessage(input: MessageInput! @spread) : Message!
     @router(action : "Modules\\Chat\\Http\\Controllers\\MessageController@store")

#     delete(chat_id: Int!) : StatusPayload
#     @router(action: "Modules\\Chat\\Http\\Controllers\\MessageController@destroy")
 }
