type User {
    id: ID!
    first_name: String!
    last_name: String!
    gender: String
    birthday: Date
    club_type: String
    phone: String!
    email: String!
    type: String
    account_type: String
    lat: String
    lng: String
    vip: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

input UserInput {
    first_name: String
    last_name: String
    gender: String
    birthday: Date
    club_type: String
    phone: String
    email: String
    type: String
    account_type: String
    lat: String
    lng: String
    vip: Boolean
    password: String
    password_confirmation: String
}

type UserPayload implements Status {
    status: Boolean!
    message: String
}

extend type Query @middleware(checks: ["auth:api"]) {
    users: [User!]! @paginate
    user(id: ID @eq): User @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateUser(user: ID!, input: UserInput @spread): UserPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@update")

    uploadUserPhoto(user: ID!, files: [Upload!]!): [File!]!
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@uploadPhoto")

    uploadUserVideo(user: ID!, files: [Upload!]!): [File!]!
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@uploadVideo")
}
