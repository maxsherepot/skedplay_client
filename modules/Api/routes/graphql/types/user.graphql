type User {
    id: ID!
    first_name: String!
    last_name: String!
    gender: String
    birthday: Date
    age: Int
    club_type: String
    phone: String!
    email: String!
    type: String
    account_type: String
    lat: String
    lng: String
    vip: Boolean
    created_at: DateTime!
    updated_at: DateTime!
    events: [Event] @belongsToMany
    prices: [Price] @belongsToMany
    services: [Service] @belongsToMany
}

input UserInput {
    first_name: String
    last_name: String
    gender: String
    birthday: Date
    club_type: String
    phone: String
    email: String
    type: String
    account_type: String
    lat: String
    lng: String
    vip: Boolean
    password: String
    password_confirmation: String
}

type UserPayload implements Status {
    status: Boolean!
    message: String
}

input UserFilters {
    services: [Int] @whereHas(key: "id", method: "whereIn")
    age: AgeRange @whereBetweenAge(key: "birthday")
    type: String @where
    account_type: String @where
    vip: Boolean @where
}

extend type Query @middleware(checks: ["auth:api"]) {
    users(filters: UserFilters @spread): [User!]! @paginate
    user(id: ID @eq): User @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateUser(user: ID!,input: UserInput @spread): UserPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\UserController@update")

    uploadUserPhotos(files: [Upload!]!): [File!]!
    @rules(apply: ["required", "file", "mimes:jpeg,jpg,png", "max:4000"])
    @field(resolver: "UserMutator@uploadPhotos")

    uploadUserVideos(files: [Upload!]!): [File!]!
    @rules(apply: ["required", "mimetypes:video/avi,video/mpeg,video/quicktime", "max:100040"])
    @field(resolver: "UserMutator@uploadVideos")
}
