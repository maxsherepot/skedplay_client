type User {
    id: ID!
    first_name: String!
    last_name: String!
    gender: String
    birtday: Date
    club_type: String
    phone: String!
    email: String!
    account_type: String
    lat: String
    lng: String
    created_at: DateTime!
    updated_at: DateTime!
}

input UserInput {
    first_name: String
    last_name: String
    gender: String
    birtday: Date
    club_type: String
    phone: String
    email: String
    account_type: String
    lat: String
    lng: String
    password: String
    password_confirmation: String
}

type UserPayload implements Status {
    status: Boolean!
    message: String
}

extend type Query @middleware(checks: ["auth:api"]) {
    users: [User!]! @paginate(type: "paginator" model: "Modules\\Users\\Entities\\User")
    user(id: ID @eq): User @find(model: "Modules\\Users\\Entities\\User")
}

extend type Mutation @middleware(checks: ["auth:api"]) @namespace(field: "Modules\\Api\\GraphQL\\Mutations") {
    updateUser(
        id: ID!,
        input: UserInput @spread
    ): UserPayload @field(resolver: "UserMutator@update")

    uploadUserPhotos(
        files: [Upload!]!
    ): [File!]! @rules(apply: ["required", "file", "mimes:jpeg,jpg,png", "max:4000"]) @field(resolver: "UserMutator@uploadPhotos")

    uploadUserVideos(
        files: [Upload!]!
    ): [File!]! @rules(apply: ["required", "mimetypes:video/avi,video/mpeg,video/quicktime", "max:100040"]) @field(resolver: "UserMutator@uploadVideos")
}