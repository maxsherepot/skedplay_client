type Girl {
    id: ID!
    first_name: String!
    last_name: String!
    gender: Int
    age: Int
    created_at: DateTime!
    updated_at: DateTime!
    type: [GirlType] @belongsTo
    events: [Event] @belongsToMany
    prices: [Price] @belongsToMany
    services: [Service] @belongsToMany
}

type GirlType {
    id: ID!
    name: String!
}

input GirlInput {
    first_name: String
    last_name: String
    gender: Int
    age: Int
    girl_type_id: Int
    description: String
    address: String
    text: String
    lat: String
    lng: String
}

type GirlPayload implements Status {
    status: Boolean!
    message: String
}

input GirlFilters {
    services: [Int] @whereHas(key: "service_id", method: "whereIn")
    age: AgeRange @whereBetween
    type: String @whereBetween
}

extend type Query {
    girls(filters: GirlFilters @spread): [Girl!]! @paginate
    girl(id: ID @eq): Girl @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    updateGirl(girl: ID!, input: GirlInput @spread): GirlPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\GirlController@update")

    createGirlEvent(girl: ID!, input: EventInput @spread): Event
    @router(action: "Modules\\Api\\Http\\Controllers\\GirlController@createEvent")
}

