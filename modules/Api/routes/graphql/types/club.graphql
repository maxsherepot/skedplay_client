type Club {
    id: ID!
    name: String!
    type: String!
    address: String
    website: String
    phone: String
    description: String
    lat: String
    lng: String
    owner: User @belongsTo
    girls: [Girl] @belongsToMany
    events: [Event] @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

input ClubInput {
    name: String!
    type: String!
    address: String
    website: String
    phone: String
    description: String
    lat: String
    lng: String
}

type ClubPayload implements Status {
    status: Boolean!
    message: String
}

extend type Query @middleware(checks: ["auth:api"]) {
    clubs: [Club!]! @paginate
    club(id: ID @eq): Club @find
}

extend type Mutation @middleware(checks: ["auth:api"]) @namespace(field: "Modules\\Api\\GraphQL\\Mutations") {
    createClub(input: ClubInput): Club
    @field(resolver: "ClubMutator@create")

    updateClub(id: ID!,input: ClubInput @spread): ClubPayload
    @field(resolver: "ClubMutator@update")

    uploadClubPhotos(files: [Upload!]!): [File!]!
    @rules(apply: ["required", "file", "mimes:jpeg,jpg,png", "max:4000"])
    @field(resolver: "ClubMutator@uploadPhotos")

    uploadClubVideos(files: [Upload!]!): [File!]!
    @rules(apply: ["required", "mimetypes:video/avi,video/mpeg,video/quicktime", "max:100040"])
    @field(resolver: "ClubMutator@uploadVideos")
}