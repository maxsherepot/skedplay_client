type Club {
    id: ID!
    name: String!
    type: String!
    address: String
    website: String
    phone: String
    description: String
    lat: String
    lng: String
    owner: User @belongsTo
    girls: [Girl] @belongsToMany
    events: [Event] @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

input ClubInput {
    name: String!
    type: String!
    address: String!
    website: String
    phone: String!
    description: String!
    lat: String
    lng: String
}

type ClubPayload implements Status {
    status: Boolean!
    message: String
}

extend type Query @middleware(checks: ["auth:api"]) {
    clubs: [Club!]! @paginate
    club(id: ID @eq): Club @find
}

extend type Mutation @middleware(checks: ["auth:api"]) {
    createClub(input: ClubInput @spread): Club
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@create")

    updateClub(club: ID!, input: ClubInput @spread): ClubPayload
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@update")

    uploadClubPhoto(club: ID!, files: [Upload!]!): [File!]!
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@uploadPhoto")

    uploadClubVideo(club: ID!, files: [Upload!]!): [File!]!
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@uploadVideo")

    createClubEvent(club: ID!, input: EventInput @spread): Event
    @router(action: "Modules\\Api\\Http\\Controllers\\ClubController@createEvent")
}